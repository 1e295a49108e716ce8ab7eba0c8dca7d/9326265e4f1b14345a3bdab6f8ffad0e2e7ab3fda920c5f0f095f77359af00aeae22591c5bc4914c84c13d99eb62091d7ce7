AudioWorkletProcessor.prototype._y1=function(){this._z1=true;this.port.onmessage=(_A1)=>{if(_A1.data==="kill")this._z1=false;};};class _B1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._y1();}process(_C1,_D1,parameters){const input=_C1[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _E1=input[c];for(let _F1=0;_F1<_E1.length;++_F1){const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];
_D1[_G1][c][_F1]=_E1[_F1];}}return this._z1;}}class _H1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._y1();}process(_C1,_D1,parameters){const _I1=_C1[0];const _J1=_C1[1];const output=_D1[0];const gain=parameters.gain;for(let c=0;c<_J1.length;++c){const _E1=_J1[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1)_K1[_F1]=_E1[_F1];}for(let c=0;c<_I1.length;++c){const _E1=_I1[c];const _K1=output[c];
for(let _F1=0;_F1<_E1.length;++_F1){const _L1=(gain[_F1]!==undefined)?gain[_F1]:gain[0];_K1[_F1]+=_E1[_F1]*_L1;}}return this._z1;}}registerProcessor("audio-bus-input",_B1);registerProcessor("audio-bus-output",_H1);class _M1 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _N1=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];this._Q1=new Float32Array(_P1);this._R1=new Uint32Array(_P1);}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){_K1[_F1]=_E1[_F1];if(this._R1[c]===0)this._Q1[c]=_E1[_F1];const _S1=(factor[_F1]!==undefined)?factor[_F1]:factor[0];++this._R1[c];this._R1[c]%=_S1;const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];if(_G1>0.0){continue;}let _T1=this._Q1[c];const _L1=(gain[_F1]!==undefined)?gain[_F1]:gain[0];_T1*=_L1;_T1=Math.max(Math.min(_T1,
1.0),-1.0);const _U1=(resolution[_F1]!==undefined)?resolution[_F1]:resolution[0];const max=(_T1>0.0)?_M1._N1[_U1]-1:_M1._N1[_U1];_T1=Math.round(_T1*max)/max;const _V1=(mix[_F1]!==undefined)?mix[_F1]:mix[0];_K1[_F1]*=(1.0-_V1);_K1[_F1]+=(_T1*_V1);}}return this._z1;}}registerProcessor("bitcrusher-processor",_M1);class _W1{constructor(_X1=1e-3){this.setTime(_X1);}setTime(_X1){this._Y1=Math.exp(-1/(_X1*sampleRate));}process(_Z1,__1){return _Z1+this._Y1*(__1-_Z1);}}class _02{constructor(_12,_22){this._32=new _W1(_12);
this._42=new _W1(_22);this._52=_12;this._62=_22;}_72(_X1){if(_X1===this._52)return;this._32.setTime(_X1);this._52=_X1;}_82(_X1){if(_X1===this._62)return;this._42.setTime(_X1);this._62=_X1;}process(_Z1,__1){if(_Z1>__1)return this._32.process(_Z1,__1);else return this._42.process(_Z1,__1);}}class _92 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_a2){super();this._y1();const _32=_92.parameterDescriptors.find(_b2=>_b2.name==="attack");const _42=_92.parameterDescriptors.find(_b2=>_b2.name==="release");
this._c2=new _02(_32.defaultValue,_42.defaultValue);this._d2=0;}process(_e2,_f2,_g2){const input=_e2[0];const output=_f2[0];const bypass=_g2.bypass;const ingain=_g2.ingain;const outgain=_g2.outgain;const threshold=_g2.threshold;const ratio=_g2.ratio;const attack=_g2.attack;const release=_g2.release;if(input.length===0)return this._z1;for(let _F1=0;_F1<input[0].length;++_F1){let frame=input.map(_h2=>_h2[_F1]);output.forEach((_h2,_i2)=>{_h2[_F1]=frame[_i2];});const _j2=(ingain[_F1]!==undefined)?ingain[_F1]:ingain[0];
frame=frame.map(_k2=>_k2*=_j2);const rect=frame.map(_k2=>Math.abs(_k2));const max=Math.max(...rect);const _l2=_m2(max);const _n2=(threshold[_F1]!==undefined)?threshold[_F1]:threshold[0];const _o2=_m2(_n2);const _p2=Math.max(0,_l2-_o2);const _32=(attack[_F1]!==undefined)?attack[_F1]:attack[0];const _42=(release[_F1]!==undefined)?release[_F1]:release[0];this._c2._72(_32);this._c2._82(_42);this._d2=this._c2.process(_p2,this._d2);const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];if(_G1>0)continue;const _U1=(ratio[_F1]!==undefined)?ratio[_F1]:ratio[0];
const _q2=(this._d2/_U1)-this._d2;const _L1=_r2(_q2);frame=frame.map(_k2=>_k2*=_L1);const _s2=(outgain[_F1]!==undefined)?outgain[_F1]:outgain[0];frame=frame.map(_k2=>_k2*=_s2);output.forEach((_h2,_i2)=>{_h2[_F1]=frame[_i2];});}return this._z1;}}function _m2(_t2){return 20*Math.log10(_t2);}function _r2(_t2){return Math.pow(10,_t2/20);}registerProcessor("compressor-processor",_92);class _u2 extends AudioWorkletProcessor{static _v2=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_u2._v2},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];const _w2=(_u2._v2*sampleRate)+1;this.buffer=new Array(_P1);this._x2=new Uint32Array(_P1);for(let c=0;c<_P1;++c)this.buffer[c]=new Float32Array(_w2);
}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){_K1[_F1]=_E1[_F1];const _n2=(time[_F1]!==undefined)?time[_F1]:time[0];const _y2=this._z2(c,_n2);const _S1=(feedback[_F1]!==undefined)?feedback[_F1]:feedback[0];const _A2=_E1[_F1]+(_y2*_S1);this.write(c,_A2);const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];
if(_G1>0.0){continue;}const _V1=(mix[_F1]!==undefined)?mix[_F1]:mix[0];_K1[_F1]*=(1-_V1);_K1[_F1]+=(_y2*_V1);}}return this._z1;}_z2(_B2,_X1){const _C2=_X1*sampleRate;let _D2=(this._x2[_B2]-~~_C2);let _E2=(_D2-1);while(_D2<0)_D2+=this.buffer[_B2].length;while(_E2<0)_E2+=this.buffer[_B2].length;const frac=_C2-~~_C2;const _F2=this.buffer[_B2][_D2];const _G2=this.buffer[_B2][_E2];return _F2+(_G2-_F2)*frac;}write(_B2,_H2){++this._x2[_B2];this._x2[_B2]%=this.buffer[_B2].length;this.buffer[_B2][this._x2[_B2]]=_H2;
}}registerProcessor("delay-processor",_u2);class _I2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._y1();}process(_J2,_K2,_L2){const input=_J2[0];const _M2=_K2[0];const _N2=_K2[1];for(let c=0;c<input.length;++c){const _E1=input[c];const _O2=_M2[c];const _P2=_N2[c];for(let _F1=0;_F1<_E1.length;++_F1){_O2[_F1]=_E1[_F1];_P2[_F1]=_E1[_F1];}}return this._z1;}}class _Q2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._y1();}process(_J2,_K2,_L2){const _I1=_J2[0];const _J1=_J2[1];const output=_K2[0];const bypass=_L2.bypass;for(let c=0;c<_J1.length;++c){const _R2=_I1[c];const _S2=_J1[c];const _K1=output[c];for(let _F1=0;_F1<_R2.length;++_F1){const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];if(_G1>0){_K1[_F1]=_S2[_F1];}else {_K1[_F1]=_R2[_F1];}}}return this._z1;}}registerProcessor("eq-input",_I2);registerProcessor("eq-output",_Q2);class _T2 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._y1();}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){_K1[_F1]=_E1[_F1];const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];
if(_G1>0.0){continue;}const _L1=(gain[_F1]!==undefined)?gain[_F1]:gain[0];_K1[_F1]*=_L1;}}return this._z1;}}registerProcessor("gain-processor",_T2);class _U2 extends AudioWorkletProcessor{static get parameterDescriptors(){const _V2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_V2),minValue:10.0,maxValue:_V2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=0;this._03=new Float32Array(_P1);this._13=new Float32Array(_P1);this._23=new Float32Array(_P1);this._33=new Float32Array(_P1);this._43=-1;this._53=-1;this._63=-1;}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _73=(freq.length===1&&q.length===1&&gain.length===1);if(_73)this._83(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){if(_73===false){const _S1=(freq[_F1]!==undefined)?freq[_F1]:freq[0];const _93=(q[_F1]!==undefined)?q[_F1]:q[0];const _L1=(gain[_F1]!==undefined)?gain[_F1]:gain[0];this._83(_S1,_93,_L1);}const _a3=this._Y2*_E1[_F1]+this._Z2*this._03[c]+this.__2*this._13[c]-this._W2*this._23[c]-this._X2*this._33[c];this._13[c]=this._03[c];
this._03[c]=_E1[_F1];this._33[c]=this._23[c];this._23[c]=_a3;const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];_K1[_F1]=(_G1>0)?_E1[_F1]:_a3;}}return this._z1;}_83(_b3,_c3,_d3){if(_b3===this._43&&_c3===this._53&&_d3===this._63)return;const _e3=2*Math.PI*_b3/sampleRate;const _f3=Math.cos(_e3);const _g3=Math.sqrt(_d3);const _h3=_g3+1;const _i3=_g3-1;const _j3=_h3*_f3;const _k3=_i3*_f3;const _l3=_h3-_k3;const _m3=_h3+_k3;const alpha=Math.sin(_e3)/(2*_c3);const _n3=(2*Math.sqrt(_g3)*alpha);const _o3=_l3+_n3;
const _W2=2*(_i3-_j3);const _X2=_l3-_n3;const _Y2=_g3*(_m3+_n3);const _Z2=-2*_g3*(_i3+_j3);const __2=_g3*(_m3-_n3);this._W2=_W2/_o3;this._X2=_X2/_o3;this._Y2=_Y2/_o3;this._Z2=_Z2/_o3;this.__2=__2/_o3;this._43=_b3;this._53=_c3;this._63=_d3;}}registerProcessor("hi-shelf-processor",_U2);class _p3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _q3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_q3),minValue:10.0,maxValue:_q3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=0;this._03=new Float32Array(_P1);this._13=new Float32Array(_P1);this._23=new Float32Array(_P1);this._33=new Float32Array(_P1);this._r3=-1;this._53=-1;}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _73=(cutoff.length===1&&q.length===1);if(_73)this._83(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){if(_73===false){const c=(cutoff[_F1]!==undefined)?cutoff[_F1]:cutoff[0];const _93=(q[_F1]!==undefined)?q[_F1]:q[0];this._83(c,_93);}const _a3=this._Y2*_E1[_F1]+this._Z2*this._03[c]+this.__2*this._13[c]-this._W2*this._23[c]-this._X2*this._33[c];this._13[c]=this._03[c];this._03[c]=_E1[_F1];this._33[c]=this._23[c];
this._23[c]=_a3;const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];_K1[_F1]=(_G1>0)?_E1[_F1]:_a3;}}return this._z1;}_83(_s3,_c3){if(_s3===this._r3&&_c3===this._53)return;const _e3=2*Math.PI*_s3/sampleRate;const alpha=Math.sin(_e3)/(2*_c3);const _f3=Math.cos(_e3);const _o3=1+alpha;const _W2=-2*_f3;const _X2=1-alpha;const _Y2=(1+_f3)/2;const _Z2=-1-_f3;const __2=(1+_f3)/2;this._W2=_W2/_o3;this._X2=_X2/_o3;this._Y2=_Y2/_o3;this._Z2=_Z2/_o3;this.__2=__2/_o3;this._r3=_s3;this._53=_c3;}}registerProcessor("hpf2-processor",
_p3);class _t3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _V2=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_V2),minValue:10.0,maxValue:_V2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];
this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=0;this._03=new Float32Array(_P1);this._13=new Float32Array(_P1);this._23=new Float32Array(_P1);this._33=new Float32Array(_P1);this._43=-1;this._53=-1;this._63=-1;}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _73=(freq.length===1&&q.length===1&&gain.length===1);if(_73)this._83(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){if(_73===false){const _S1=(freq[_F1]!==undefined)?freq[_F1]:freq[0];const _93=(q[_F1]!==undefined)?q[_F1]:q[0];const _L1=(gain[_F1]!==undefined)?gain[_F1]:gain[0];this._83(_S1,_93,_L1);}const _a3=this._Y2*_E1[_F1]+this._Z2*this._03[c]+this.__2*this._13[c]-this._W2*this._23[c]-this._X2*this._33[c];this._13[c]=this._03[c];this._03[c]=_E1[_F1];this._33[c]=this._23[c];this._23[c]=_a3;const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];
_K1[_F1]=(_G1>0)?_E1[_F1]:_a3;}}return this._z1;}_83(_b3,_c3,_d3){if(_b3===this._43&&_c3===this._53&&_d3===this._63)return;const _e3=2*Math.PI*_b3/sampleRate;const _f3=Math.cos(_e3);const _g3=Math.sqrt(_d3);const _h3=_g3+1;const _i3=_g3-1;const _j3=_h3*_f3;const _k3=_i3*_f3;const _l3=_h3-_k3;const _m3=_h3+_k3;const alpha=Math.sin(_e3)/(2*_c3);const _n3=(2*Math.sqrt(_g3)*alpha);const _o3=_m3+_n3;const _W2=-2*(_i3+_j3);const _X2=_m3-_n3;const _Y2=_g3*(_l3+_n3);const _Z2=2*_g3*(_i3-_j3);const __2=_g3*(_l3-_n3);this._W2=_W2/_o3;
this._X2=_X2/_o3;this._Y2=_Y2/_o3;this._Z2=_Z2/_o3;this.__2=__2/_o3;this._43=_b3;this._53=_c3;this._63=_d3;}}registerProcessor("lo-shelf-processor",_t3);class _u3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _q3=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_q3),minValue:10.0,maxValue:_q3},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=0;this._03=new Float32Array(_P1);this._13=new Float32Array(_P1);this._23=new Float32Array(_P1);this._33=new Float32Array(_P1);this._r3=-1;this._53=-1;}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _73=(cutoff.length===1&&q.length===1);if(_73)this._83(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){if(_73===false){const c=(cutoff[_F1]!==undefined)?cutoff[_F1]:cutoff[0];const _93=(q[_F1]!==undefined)?q[_F1]:q[0];this._83(c,_93);}const _a3=this._Y2*_E1[_F1]+this._Z2*this._03[c]+this.__2*this._13[c]-this._W2*this._23[c]-this._X2*this._33[c];this._13[c]=this._03[c];this._03[c]=_E1[_F1];this._33[c]=this._23[c];this._23[c]=_a3;const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];_K1[_F1]=(_G1>0)?_E1[_F1]:_a3;
}}return this._z1;}_83(_s3,_c3){if(_s3===this._r3&&_c3===this._53)return;const _e3=2*Math.PI*_s3/sampleRate;const alpha=Math.sin(_e3)/(2*_c3);const _f3=Math.cos(_e3);const _o3=1+alpha;const _W2=-2*_f3;const _X2=1-alpha;const _Y2=(1-_f3)/2;const _Z2=1-_f3;const __2=(1-_f3)/2;this._W2=_W2/_o3;this._X2=_X2/_o3;this._Y2=_Y2/_o3;this._Z2=_Z2/_o3;this.__2=__2/_o3;this._r3=_s3;this._53=_c3;}}registerProcessor("lpf2-processor",_u3);class _v3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _V2=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_V2),minValue:10.0,maxValue:_V2},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];this._W2=0;this._X2=0;this._Y2=0;this._Z2=0;this.__2=0;this._03=new Float32Array(_P1);this._13=new Float32Array(_P1);
this._23=new Float32Array(_P1);this._33=new Float32Array(_P1);this._43=-1;this._53=-1;this._63=-1;}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _73=(freq.length===1&&q.length===1&&gain.length===1);if(_73)this._83(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){if(_73===false){const _S1=(freq[_F1]!==undefined)?freq[_F1]:freq[0];
const _93=(q[_F1]!==undefined)?q[_F1]:q[0];const _L1=(gain[_F1]!==undefined)?gain[_F1]:gain[0];this._83(_S1,_93,_L1);}const _a3=this._Y2*_E1[_F1]+this._Z2*this._03[c]+this.__2*this._13[c]-this._W2*this._23[c]-this._X2*this._33[c];this._13[c]=this._03[c];this._03[c]=_E1[_F1];this._33[c]=this._23[c];this._23[c]=_a3;const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];_K1[_F1]=(_G1>0)?_E1[_F1]:_a3;}}return this._z1;}_83(_b3,_c3,_d3){if(_b3===this._43&&_c3===this._53&&_d3===this._63)return;const _e3=2*Math.PI*_b3/sampleRate;
const _f3=Math.cos(_e3);const _g3=Math.sqrt(_d3);const alpha=Math.sin(_e3)/(2*_c3);const _w3=alpha/_g3;const _x3=alpha*_g3;const _o3=1+_w3;const _W2=-2*_f3;const _X2=1-_w3;const _Y2=1+_x3;const _Z2=_W2;const __2=1-_x3;this._W2=_W2/_o3;this._X2=_X2/_o3;this._Y2=_Y2/_o3;this._Z2=_Z2/_o3;this.__2=__2/_o3;this._43=_b3;this._53=_c3;this._63=_d3;}}registerProcessor("peak-eq-processor",_v3);class _y3{constructor(_z3){this._A3=0;this._B3=0;this.feedback=0;this._C3=0;this.buffer=new Float32Array(_z3);this._D3=0;}process(_H2){
const out=this.buffer[this._D3];this._C3=(this._C3*this._A3)+(out*this._B3);this.buffer[this._D3]=_H2+(this._C3*this.feedback);++this._D3;this._D3%=this.buffer.length;return out;}_E3(_F3){this.feedback=Math.min(Math.max(0,_F3),1);}_G3(_H3){this._A3=Math.min(Math.max(0,_H3),1);this._B3=1-this._A3;}}class _I3{constructor(_z3){this.feedback=0;this.buffer=new Float32Array(_z3);this._D3=0;}process(_H2){const out=this.buffer[this._D3];this.buffer[this._D3]=_H2+(out*this.feedback);++this._D3;this._D3%=this.buffer.length;
return(out-_H2);}_E3(_F3){this.feedback=Math.min(Math.max(0,_F3),1);}}class _J3 extends AudioWorkletProcessor{static _K3=8;static _L3=4;static _M3=0.015;static _N3=0.4;static _O3=0.28;static _P3=0.7;static _Q3=[1116,1188,1277,1356,1422,1491,1557,1617];static _R3=[1139,1211,1300,1379,1445,1514,1580,1640];static _S3=[556,441,341,225];static _T3=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];this._U3=-1;this._V3=-1;this._W3=new Array(_P1);this._X3=new Array(_P1);const _Y3=[_J3._Q3,_J3._R3];const _Z3=[_J3._S3,_J3._T3];for(let c=0;c<_P1;++c){this._W3[c]=new Array(_J3._K3);this._X3[c]=new Array(_J3._L3);for(let i=0;i<_J3._K3;
++i)this._W3[c][i]=new _y3(_Y3[c%_Y3.length][i]);for(let i=0;i<_J3._L3;++i)this._X3[c][i]=new _I3(_Z3[c%_Z3.length][i]);}this.__3(0.5);this._G3(0.5);for(let c=0;c<_P1;++c)for(let i=0;i<_J3._L3;++i)this._X3[c][i]._E3(0.5);}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _04=0;_04<_E1.length;++_04){const _F1=(size[_04]!==undefined)?size[_04]:size[0];
const _14=(damp[_04]!==undefined)?damp[_04]:damp[0];this.__3(_F1);this._G3(_14);_K1[_04]=_E1[_04];let out=0;const _T1=_E1[_04]*_J3._M3;for(let i=0;i<_J3._K3;++i)out+=this._W3[c][i].process(_T1);for(let i=0;i<_J3._L3;++i)out=this._X3[c][i].process(out);const _G1=(bypass[_04]!==undefined)?bypass[_04]:bypass[0];if(_G1>0.0){continue;}const _V1=(mix[_04]!==undefined)?mix[_04]:mix[0];_K1[_04]*=(1-_V1);_K1[_04]+=(out*_V1);}}return this._z1;}__3(_z3){if(_z3===this._U3)return;const size=(_z3*_J3._O3)+_J3._P3;for(let c=0;
c<this._W3.length;++c)for(let i=0;i<_J3._K3;++i)this._W3[c][i]._E3(size);this._U3=_z3;}_G3(_H3){if(_H3===this._V3)return;const damp=_H3*_J3._N3;for(let c=0;c<this._W3.length;++c)for(let i=0;i<_J3._K3;++i)this._W3[c][i]._G3(damp);this._V3=_H3;}}registerProcessor("reverb1-processor",_J3);class _24 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_O1){super();this._y1();const _P1=_O1.outputChannelCount[0];this._34=new Array(_P1).fill(1.0);this._44=new Array(_P1).fill(0.0);this._54=new Array(_P1).fill(_64._74._84);this._94=new Array(_P1);for(let c=0;c<_P1;++c){this._94[c]=new _a4();
this._94[c]._b4(sampleRate);this._94[c]._c4(this._34[c]);this._94[c]._d4(this._54[c]);if(c%2===1){this._94[c]._e4(this._44[c]);}}}process(_C1,_D1,parameters){const input=_C1[0];const output=_D1[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _E1=input[c];const _K1=output[c];for(let _F1=0;_F1<_E1.length;++_F1){_K1[_F1]=_E1[_F1];const _U1=(rate[_F1]!==undefined)?rate[_F1]:rate[0];
const _f4=(offset[_F1]!==undefined)?offset[_F1]:offset[0];const _g4=(shape[_F1]!==undefined)?shape[_F1]:shape[0];this._h4(c,_U1,_f4,_g4);const _i4=this._94[c]._z2();const _G1=(bypass[_F1]!==undefined)?bypass[_F1]:bypass[0];if(_G1>0.0){continue;}const i=(intensity[_F1]!==undefined)?intensity[_F1]:intensity[0];const out=_E1[_F1]*_i4*i;_K1[_F1]*=(1.0-i);_K1[_F1]+=out;}}return this._z1;}_h4(_B2,_j4,_k4,_l4){if(_j4!==this._34[_B2]){this._94[_B2]._c4(_j4);this._34[_B2]=_j4;}if(_k4!==this._44[_B2]){if(_B2%2===1){
this._94[_B2]._e4(_k4);}this._44[_B2]=_k4;}if(_l4!==this._54[_B2]){this._94[_B2]._d4(_l4);this._54[_B2]=_l4;}}}registerProcessor("tremolo-processor",_24);function _64(){}_64._74={_84:0,_m4:1,_n4:2,_o4:3,_p4:4,_q4:5};_64._r4=function(_s4){return 1.0-_s4;};_64._t4=function(_s4){return _s4;};_64._u4=function(_s4){return 0.5*(Math.sin((_s4*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_64._v4=function(_s4){if(_s4<0.5){return 0.0;}return 1.0;};_64._w4=function(_s4){if(_s4<0.5){return 2.0*_s4;}return 2.0-(2.0*_s4);};_64._x4=[_64._r4,
_64._t4,_64._u4,_64._v4,_64._w4];_y4._z4=512;_y4._A4=1.0/_y4._z4;function _y4(_B4){this.data=new Float32Array(_y4._z4);for(let i=0;i<_y4._z4;++i){this.data[i]=_B4(i*_y4._A4);}}_y4.prototype._z2=function(_s4){_s4=Math.max(0.0,_s4);_s4=Math.min(_s4,1.0);const _C4=_s4*_y4._z4;const _D4=~~_C4;const _E4=_C4-_D4;let _D2=_D4;let _E2=_D2+1;if(_D2>=_y4._z4){_D2-=_y4._z4;}if(_E2>=_y4._z4){_E2-=_y4._z4;}const _F2=this.data[_D2];const _G2=this.data[_E2];return _F2+(_G2-_F2)*_E4;};_a4._F4=[];_a4._G4=false;_a4._H4=0.0;_a4._V2=20.0;
function _a4(){this._I4=48000;this.shape=_64._74._n4;this.freq=1.0;this._J4=0.0;this._A4=0.0;this._K4=0.0;if(_a4._G4==true){return;}for(let i=0;i<_64._74._q4;++i){_a4._F4[i]=new _y4(_64._x4[i]);}_a4._G4=true;}_a4._L4=function(){return(_a4._G4==true);};_a4.prototype._b4=function(_M4){this._I4=_M4;this._N4();};_a4.prototype._c4=function(_b3){_b3=Math.max(_a4._H4,_b3);_b3=Math.min(_b3,_a4._V2);this.freq=_b3;this._N4();};_a4.prototype._e4=function(_k4){_k4=Math.max(0.0,_k4);_k4=Math.min(_k4,1.0);const _O4=_k4-this._K4;
this._K4=_k4;this._J4+=_O4;while(this._J4>=1.0){this._J4-=1.0;}while(this._J4<0.0){this._J4+=1.0;}};_a4.prototype._d4=function(_l4){_l4=Math.max(0,_l4);_l4=Math.min(_l4,_64._74._q4-1);this.shape=_l4;};_a4.prototype._z2=function(){const result=_a4._F4[this.shape]._z2(this._J4);this._J4+=this._A4;while(this._J4>=1.0){this._J4-=1.0;}return result;};_a4.prototype._N4=function(){this._A4=this.freq/this._I4;};